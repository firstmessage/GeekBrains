/**
 * Java. Level 2. Lesson 8
 * Simple server for chat
 *
 * @author Sergey Iryupin
 * @version 0.3.3 dated Jun 29, 2018
 */
import java.io.*;
import java.net.*;
import java.sql.*;
import java.util.*;

class SimpleServer implements IConstants {
    List<ClientHandler> clients; // list of clients

    public static void main(String[] args) {
        new SimpleServer();
    }

    SimpleServer() {
        ClientHandler client;
        clients = new ArrayList<>();
        System.out.println(SERVER_START);
        try (ServerSocket server = new ServerSocket(SERVER_PORT)) {
            new Thread(new CommandHandler(server)).start(); // command to server
            while (true) {
                Socket socket = server.accept();
                synchronized (clients) {
                    client = new ClientHandler(socket, clients.size() + 1);
                    clients.add(client); // adding new client in the list
                    System.out.println("#" + (clients.size()) + CLIENT_JOINED);
                }
                new Thread(client).start();
            }
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
        System.out.println(SERVER_STOP);
    }

    /**
     * checkAuthentication: check login and password
     *
     * @param  login for checking
     * @param  passwd for checking
     *
     * @return if the pair login/passwd is found in the database,
     *         authentication is successful
     */
    private boolean checkAuthentication(String login, String passwd) {
        boolean result = false;
        try {
            // loads a class, including running its static initializers
            Class.forName(DRIVER_NAME);
            // connect db
            Connection connect = DriverManager.getConnection(SQLITE_DB);
            // looking for login && passwd in db
            PreparedStatement pstmt = connect.prepareStatement(SQL_SELECT);
            // replace "?" to the login
            pstmt.setString(1, login);
            // returns ResultSet object generated by the query
            ResultSet rs = pstmt.executeQuery();
            // process rows from the query result
            while (rs.next())
                result = rs.getString(PASSWD_COL).equals(passwd);
            // close all
            rs.close();
            pstmt.close();
            connect.close();
        } catch (ClassNotFoundException | SQLException ex) {
            ex.printStackTrace();
            return false;
        }
        return result;
    }

    /**
     * CommandHandler: processing of commands from server console
     */
    class CommandHandler implements Runnable {
        ServerSocket server;
        Scanner scanner;

        CommandHandler(ServerSocket server) {
            this.server = server;
            scanner = new Scanner(System.in);
        }

        @Override
        public void run() {
            String command;
            do
                command = scanner.nextLine();
            while (!command.equalsIgnoreCase(EXIT_COMMAND));
            try {
                server.close();
            } catch (Exception ex) {
                System.out.println(ex.getMessage());
            }
        }
    }

    /**
     * broadcastMsg: sending a message to all clients
     */
    private void broadcastMsg(String msg) {
        synchronized (clients) {
            for (ClientHandler client : clients)
                client.sendMsg(msg);
        }
    }

    /**
     * ClientHandler: service requests of clients
     */
    class ClientHandler implements Runnable {
        BufferedReader reader;
        PrintWriter writer;
        Socket socket;
        String name;

        ClientHandler(Socket clientSocket, int counter) {
            try {
                socket = clientSocket;
                reader = new BufferedReader(
                    new InputStreamReader(socket.getInputStream()));
                writer = new PrintWriter(socket.getOutputStream());
                name = "Client #" + counter;
            } catch (Exception ex) {
                System.out.println(ex.getMessage());
            }
        }

        /**
         * sendMsg: sending a message to the client
         */
        private void sendMsg(String msg) {
            try {
                writer.println(msg);
                writer.flush();
            } catch (Exception ex) {
                System.out.println(ex.getMessage());
            }
        }

        @Override
        public void run() {
            String message;
            try {
                do {
                    message = reader.readLine();
                    if (message != null) {
                        System.out.println(name + ": " + message);
                        if (message.startsWith(AUTH_SIGN)) {
                            String[] wds = message.split(" ");
                            if (checkAuthentication(wds[1], wds[2])) {
                                name = wds[1];
                                sendMsg("Hello, " + name);
                                sendMsg("\0");
                            } else {
                                System.out.println(name + ": " + AUTH_FAIL);
                                sendMsg(AUTH_FAIL);
                                message = EXIT_COMMAND;
                            }
                        } else if (!message.equalsIgnoreCase(EXIT_COMMAND)) {
                            broadcastMsg(name + ": " + message);
                            broadcastMsg("\0");
                        }
                    }
                } while (!message.equalsIgnoreCase(EXIT_COMMAND));
                synchronized (clients) {
                    clients.remove(this); // delete client from list
                }
                socket.close();
                System.out.println(name + CLIENT_DISCONNECTED);
            } catch (Exception ex) {
                System.out.println(ex.getMessage());
            }
        }
    }
}